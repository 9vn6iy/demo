#include <pthread.h>
#include <signal.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

#include <arpa/inet.h> // to avoid warning at inet_ntoa
#include <linux/if_packet.h>
#include <netinet/if_ether.h> // for ethernet header
#include <netinet/in.h>
#include <netinet/ip.h> // for ip header
#include <netinet/tcp.h>
#include <netinet/udp.h> // for udp header

#define BUF_SIZE 1024

void ethernet_header(unsigned char *buffer, int buflen, FILE *log_txt) {
  struct ethhdr *eth = (struct ethhdr *)(buffer);
  fprintf(log_txt, "\nEthernet Header\n");
  fprintf(log_txt, "\t|-Source Address	: %.2X-%.2X-%.2X-%.2X-%.2X-%.2X\n",
          eth->h_source[0], eth->h_source[1], eth->h_source[2],
          eth->h_source[3], eth->h_source[4], eth->h_source[5]);
  fprintf(log_txt,
          "\t|-Destination Address	: %.2X-%.2X-%.2X-%.2X-%.2X-%.2X\n",
          eth->h_dest[0], eth->h_dest[1], eth->h_dest[2], eth->h_dest[3],
          eth->h_dest[4], eth->h_dest[5]);
  fprintf(log_txt, "\t|-Protocol		: %d\n", eth->h_proto);
}

void ip_header(unsigned char *buffer, int buflen, int *iphdrlen,
               struct sockaddr_in *source, struct sockaddr_in *dest,
               FILE *log_txt) {
  struct iphdr *ip = (struct iphdr *)(buffer + sizeof(struct ethhdr));

  *iphdrlen = ip->ihl * 4;

  memset(source, 0, sizeof(*source));
  source->sin_addr.s_addr = ip->saddr;
  memset(dest, 0, sizeof(*dest));
  dest->sin_addr.s_addr = ip->daddr;

  fprintf(log_txt, "\nIP Header\n");

  fprintf(log_txt, "\t|-Version              : %d\n",
          (unsigned int)ip->version);
  fprintf(log_txt, "\t|-Internet Header Length  : %d DWORDS or %d Bytes\n",
          (unsigned int)ip->ihl, ((unsigned int)(ip->ihl)) * 4);
  fprintf(log_txt, "\t|-Type Of Service   : %d\n", (unsigned int)ip->tos);
  fprintf(log_txt, "\t|-Total Length      : %d  Bytes\n", ntohs(ip->tot_len));
  fprintf(log_txt, "\t|-Identification    : %d\n", ntohs(ip->id));
  fprintf(log_txt, "\t|-Time To Live	    : %d\n", (unsigned int)ip->ttl);
  fprintf(log_txt, "\t|-Protocol 	    : %d\n",
          (unsigned int)ip->protocol);
  fprintf(log_txt, "\t|-Header Checksum   : %d\n", ntohs(ip->check));
  fprintf(log_txt, "\t|-Source IP         : %s\n", inet_ntoa(source->sin_addr));
  fprintf(log_txt, "\t|-Destination IP    : %s\n", inet_ntoa(dest->sin_addr));
}

void payload(unsigned char *buffer, int buflen, int *iphdrlen, FILE *log_txt) {
  int i = 0;
  unsigned char *data =
      (buffer + *iphdrlen + sizeof(struct ethhdr) + sizeof(struct udphdr));
  fprintf(log_txt, "\nData\n");
  int remaining_data =
      buflen - (*iphdrlen + sizeof(struct ethhdr) + sizeof(struct udphdr));
  for (i = 0; i < remaining_data; i++) {
    if (i != 0 && i % 16 == 0)
      fprintf(log_txt, "\n");
    fprintf(log_txt, " %.2X ", data[i]);
  }
  fprintf(log_txt, "\n");
}

void tcp_header(unsigned char *buffer, int buflen, FILE *log_txt, int *iphdrlen,
                struct sockaddr_in *source, struct sockaddr_in *dest) {
  fprintf(
      log_txt,
      "\n*************************TCP Packet******************************");
  ethernet_header(buffer, buflen, log_txt);
  ip_header(buffer, buflen, iphdrlen, source, dest, log_txt);

  struct tcphdr *tcp =
      (struct tcphdr *)(buffer + *iphdrlen + sizeof(struct ethhdr));
  fprintf(log_txt, "\nTCP Header\n");
  fprintf(log_txt, "\t|-Source Port          : %u\n", ntohs(tcp->source));
  fprintf(log_txt, "\t|-Destination Port     : %u\n", ntohs(tcp->dest));
  fprintf(log_txt, "\t|-Sequence Number      : %u\n", ntohl(tcp->seq));
  fprintf(log_txt, "\t|-Acknowledge Number   : %u\n", ntohl(tcp->ack_seq));
  fprintf(log_txt, "\t|-Header Length        : %d DWORDS or %d BYTES\n",
          (unsigned int)tcp->doff, (unsigned int)tcp->doff * 4);
  fprintf(log_txt, "\t|----------Flags-----------\n");
  fprintf(log_txt, "\t\t|-Urgent Flag          : %d\n", (unsigned int)tcp->urg);
  fprintf(log_txt, "\t\t|-Acknowledgement Flag : %d\n", (unsigned int)tcp->ack);
  fprintf(log_txt, "\t\t|-Push Flag            : %d\n", (unsigned int)tcp->psh);
  fprintf(log_txt, "\t\t|-Reset Flag           : %d\n", (unsigned int)tcp->rst);
  fprintf(log_txt, "\t\t|-Synchronise Flag     : %d\n", (unsigned int)tcp->syn);
  fprintf(log_txt, "\t\t|-Finish Flag          : %d\n", (unsigned int)tcp->fin);
  fprintf(log_txt, "\t|-Window size          : %d\n", ntohs(tcp->window));
  fprintf(log_txt, "\t|-Checksum             : %d\n", ntohs(tcp->check));
  fprintf(log_txt, "\t|-Urgent Pointer       : %d\n", tcp->urg_ptr);

  payload(buffer, buflen, iphdrlen, log_txt);

  fprintf(log_txt, "***********************************************************"
                   "******\n\n\n");
}

void udp_header(unsigned char *buffer, int buflen, FILE *log_txt, int *iphdrlen,
                struct sockaddr_in *source, struct sockaddr_in *dest) {
  fprintf(
      log_txt,
      "\n*************************UDP Packet******************************");
  ethernet_header(buffer, buflen, log_txt);
  ip_header(buffer, buflen, iphdrlen, source, dest, log_txt);
  fprintf(log_txt, "\nUDP Header\n");

  struct udphdr *udp =
      (struct udphdr *)(buffer + *iphdrlen + sizeof(struct ethhdr));
  fprintf(log_txt, "\t|-Source Port    	: %d\n", ntohs(udp->source));
  fprintf(log_txt, "\t|-Destination Port	: %d\n", ntohs(udp->dest));
  fprintf(log_txt, "\t|-UDP Length      	: %d\n", ntohs(udp->len));
  fprintf(log_txt, "\t|-UDP Checksum   	: %d\n", ntohs(udp->check));

  payload(buffer, buflen, iphdrlen, log_txt);

  fprintf(log_txt, "***********************************************************"
                   "******\n\n\n");
}

void data_process(unsigned char *buffer, int buflen, FILE *log_txt, int *total,
                  int *tcp, int *udp, int *other, int *iphdrlen,
                  struct sockaddr_in *source, struct sockaddr_in *dest) {
  struct iphdr *ip = (struct iphdr *)(buffer + sizeof(struct ethhdr));
  ++(*total);
  /* we will se UDP Protocol only*/
  switch (ip->protocol) {
  case 6:
    ++(*tcp);
    tcp_header(buffer, buflen, log_txt, iphdrlen, source, dest);
    break;
  case 17:
    ++(*udp);
    udp_header(buffer, buflen, log_txt, iphdrlen, source, dest);
    break;

  default:
    ++(*other);
  }
  printf("TCP: %d  UDP: %d  Other: %d  Toatl: %d  \r", *tcp, *udp, *other,
         *total);
}

struct ThreadData {
  int sock;
  unsigned char *buffer;
  struct sockaddr *saddr;
  FILE *log_txt;
  int *tcp;
  int *udp;
  int *other;
  int *total;
  int buflen;
  int *iphdrlen;
  struct sockaddr_in *source;
  struct sockaddr_in *dest;
};

void *handleRequest(void *arg) {
  struct ThreadData *t = (struct ThreadData *)arg;
  fflush(t->log_txt);
  data_process(t->buffer, t->buflen, t->log_txt, t->total, t->tcp, t->udp,
               t->other, t->iphdrlen, t->source, t->dest);
  fflush(t->log_txt);
  data_process(t->buffer, t->buflen, t->log_txt, t->total, t->tcp, t->udp,
               t->other, t->iphdrlen, t->source, t->dest);
}

int main() {

  int total = 0, tcp = 0, udp = 0, icmp = 0, igmp = 0, other = 0, iphdrlen = 0;

  struct sockaddr saddr;
  struct sockaddr_in source, dest;

  FILE *log_txt;
  int sock_r, saddr_len, buflen;

  unsigned char *buffer = (unsigned char *)malloc(BUF_SIZE);
  memset(buffer, 0, BUF_SIZE);

  log_txt = fopen("log.txt", "w");
  if (!log_txt) {
    printf("unable to open log.txt\n");
    return -1;
  }

  printf("starting .... \n");

  sock_r = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
  if (sock_r < 0) {
    printf("error in socket\n");
    return -1;
  }
  int v = TPACKET_V3;
  int opt = setsockopt(sock_r, SOL_PACKET, PACKET_VERSION, &v, sizeof(v));
  if (opt < 0) {
    printf("setsockopt() failed\n");
    exit(1);
  }

  while (1) {
    int saddr_len = sizeof saddr;
    buflen =
        recvfrom(sock_r, buffer, BUF_SIZE, 0, &saddr, (socklen_t *)&saddr_len);
    if (buflen < 0) {
      printf("error in reading recvfrom function\n");
      return -1;
    }
    pthread_t id;
    struct ThreadData td;
    td.log_txt = log_txt;
    td.saddr = &saddr;
    td.buffer = buffer;
    td.sock = sock_r;
    td.total = &total;
    td.tcp = &tcp;
    td.udp = &udp;
    td.other = &other;
    td.buflen = buflen;
    td.iphdrlen = &iphdrlen;
    td.source = &source;
    td.dest = &dest;
    pthread_create(&id, NULL, handleRequest, (void *)&td);
  }
  close(sock_r);
  printf("DONE!!!!\n");
}
